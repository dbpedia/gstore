{{>licenseInfo}}

package {{package}}

{{#imports}}import {{import}}
{{/imports}}

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra._
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._
import scala.util.{Try, Failure, Success}
import javax.servlet.http.HttpServletRequest

class {{classname}}(implicit val swagger: Swagger, apiImpl: DatabusApi) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "{{classname}}"
  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
{{#operations}}
{{#operation}}
  {{newline}}

  val {{nickname}}Operation = (apiOperation[{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Unit{{/returnType}}]("{{nickname}}")
      summary "{{{summary}}}"
      parameters({{#allParams}}{{>queryParam}}{{>pathParam}}{{>bodyParam}}{{>formParam}}{{>headerParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
  )

  {{httpMethod}}("{{{vendorExtensions.x-scalatra-path}}}",operation({{nickname}}Operation)) {
    {{#allParams}}
    {{#isFile}}val {{paramName}} = fileParams("{{paramName}}"){{/isFile}}
    {{^isFile}}{{#isPathParam}}
    val {{paramName}} = params.getOrElse("{{paramName}}", halt(400)){{/isPathParam}}
    {{>databusQueryParam}}{{>headerParamOperation}}{{>databusFormParam}}{{>databusBodyParamOperation}}
    {{/isFile}}
  {{/allParams}}
    val resp = apiImpl.{{nickname}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})(request)
    resp match {
        case Success(r) => Ok(r)
        case Failure(e) =>
            log("Error processing request", e)
    {{#responses}}{{^isDefault}}{{^hasMore}}
            apiImpl.{{nickname}}MapToResponse(e)
    {{/hasMore}}{{/isDefault}}{{/responses}}
    {{#responses}}{{#isDefault}}{{^hasMore}}
            InternalServerError(e)
    {{/hasMore}}{{/isDefault}}{{/responses}}
    }
  }

{{/operation}}
{{/operations}}
}

trait DatabusApi {
{{#operations}}
{{#operation}}
{{newline}}
  def {{nickname}}({{#allParams}}{{paramName}}: {{dataType}}{{#hasMore}}, {{/hasMore}}{{/allParams}})(request: HttpServletRequest): Try[{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Unit{{/returnType}}]
{{#responses}}
  {{^isDefault}}
  def  {{nickname}}MapException{{code}}(e: Throwable): {{#dataType}}Option[{{.}}]{{/dataType}}{{^dataType}}Option[String]{{/dataType}}
  {{/isDefault}}
{{/responses}}

{{#responses}}{{^isDefault}}{{^hasMore}}
  protected[api] def {{nickname}}MapToResponse(e: Throwable): ActionResult =
    List(
{{/hasMore}}{{/isDefault}}{{/responses}}
    {{#responses}}
        {{^isDefault}}
      {{nickname}}MapException{{code}}(e).map(r => ActionResult({{code}}, r, Map.empty)){{#hasMore}},{{/hasMore}}
        {{/isDefault}}
    {{/responses}}
{{#responses}}{{^isDefault}}{{^hasMore}}
    ).flatten.headOption.getOrElse(InternalServerError(e))
{{/hasMore}}{{/isDefault}}{{/responses}}
{{/operation}}
{{/operations}}

}