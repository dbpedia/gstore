swagger: "2.0"
info:
  description: "This is the DbPedia databus web-api draft."
  version: "1.0.0"
  title: "Databus API"
basePath: "/databus"
schemes:
  - "https"
  - "http"
paths:
  /dataid:
    post:
      summary: "Upload dataid ttl"
      description: ""
      operationId: "dataidUpload"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "X-Client-Cert"
          in: "header"
          required: false
          type: "string"
          description: "Client certificate, which was used to sign the dataid file. Needed in case we dont use SSL connection with client auth."
        - in: "body"
          name: "body"
          description: "Dataid file with the signature and upload params"
          required: true
          schema:
            $ref: "#/definitions/DataidFileUpload"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
  /{username}/{groupId}:
    put:
      summary: "Create group"
      description: ""
      operationId: "createGroup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: groupId
          type: string
          required: true
          description: Group name
        - in: path
          name: username
          type: string
          required: true
        - in: "body"
          name: "body"
          description: "Turtle or JSONLD with group meta."
          required: true
          schema:
            $ref: "#/definitions/BinaryBody"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
    delete:
      summary: "Delete group"
      description: ""
      operationId: "deleteGroup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: groupId
          type: string
          required: true
          description: Group name
        - in: path
          name: username
          type: string
          required: true
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
    get:
      summary: "Get group meta"
      description: ""
      operationId: "getGroup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: groupId
          type: string
          required: true
          description: Group name
        - in: path
          name: username
          type: string
          required: true
      responses:
        "200":
          description: "A turtle file"
          content:
            text/turtle:
              schema:
                type: string
                format: binary
  /{username}/{groupId}/{artifactId}/{versionId}:
    put:
      summary: "Create version"
      description: ""
      operationId: "createVersion"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: versionId
          type: string
          required: true
          description: Version name
        - in: path
          name: groupId
          type: string
          required: true
          description: Version name
        - in: path
          name: username
          type: string
          required: true
          description: Version name
        - in: path
          name: artifactId
          type: string
          required: true
          description: Version name
        - in: "body"
          name: "body"
          description: "Turtle or JSONLD with version meta."
          required: true
          schema:
            $ref: "#/definitions/BinaryBody"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
    delete:
      summary: "Delete version"
      description: ""
      operationId: "deleteVersion"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: versionId
          type: string
          required: true
          description: Version name
        - in: path
          name: groupId
          type: string
          required: true
          description: Version name
        - in: path
          name: username
          type: string
          required: true
          description: Version name
        - in: path
          name: artifactId
          type: string
          required: true
          description: Version name
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
    get:
      summary: "Get version meta"
      description: ""
      operationId: "getVersion"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: versionId
          type: string
          required: true
          description: Version name
        - in: path
          name: groupId
          type: string
          required: true
          description: Version name
        - in: path
          name: username
          type: string
          required: true
          description: Version name
        - in: path
          name: artifactId
          type: string
          required: true
          description: Version name
      responses:
        "200":
          description: "A turtle file"
          content:
            text/turtle:
              schema:
                type: string
                format: binary
  /api/dataid/subgraph/:
    post:
      summary: "Returns a subgraph of dataid for signing"
      description: ""
      operationId: "dataidSubgraph"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Returns dataid file body subgraph. Here we can just use Base64 encoded body"
          required: true
          schema:
            $ref: "#/definitions/BinaryBody"
      responses:
        "200":
          description: "successful operation, here we can just use Base64 encoded body"
          schema:
            $ref: "#/definitions/BinaryBody"
  /api/dataid/subgraph/hash/:
    post:
      summary: "Calculates hash of the subgraph of the dataid file for signing"
      description: "Just for convenience"
      operationId: "dataidSubgraphHash"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Dataid subgraph data"
          required: true
          schema:
            $ref: "#/definitions/BinaryBody"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataIdSignatureMeta"
definitions:
  BinaryBody:
    type: "object"
    description: "this may be extended/changed"
    properties:
      dataBase64:
        type: "string"
    required:
      - dataBase64
  DataIdSignatureMeta:
    type: "object"
    description: "may be needed to add some more details"
    properties:
      hash:
        type: "string"
  DataidFileUpload:
    type: "object"
    properties:
      file:
        description: "Can be sent in different formats: JSONLD, Turtle"
        $ref: "#/definitions/BinaryBody"
      subgraph:
        description: "This will allow to easily change the subgraph, and also to validate the subgraph against the dataid"
        $ref: "#/definitions/BinaryBody"
      subgraphSignature:
        $ref: "#/definitions/BinaryBody"
      allowOverwrite:
        type: "string"
      datasetIdentifier:
        type: "string"
      dataIdVersion:
        type: "string"
    required:
      - file
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
