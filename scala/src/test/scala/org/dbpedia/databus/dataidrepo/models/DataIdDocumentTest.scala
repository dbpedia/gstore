package org.dbpedia.databus.dataidrepo.models

import org.dbpedia.databus.dataidrepo.helpers._

import com.typesafe.scalalogging.LazyLogging
import org.apache.jena.rdf.model.ModelFactory
import org.apache.jena.riot.{Lang, RDFDataMgr}
import org.scalatra.test.scalatest.ScalatraFlatSpec

class DataIdDocumentTest extends ScalatraFlatSpec with LazyLogging {

  lazy val infoboxExampleModel = resourceAsStream("infobox-properties-1.0.0-dataid.ttl") apply { is =>

    ModelFactory.createDefaultModel().tap { rdfModel =>

      RDFDataMgr.read(rdfModel, is, Lang.TURTLE)
    }
  }

  def infoboxExampleDataIdDoc = new DataIdDocument(infoboxExampleModel)

  "A DataIdDocument object for current example infobox DataId as generated by the release plugin" should
    "retrieve all functional dataid:associatedAgent declarations" in {

    val agents = infoboxExampleDataIdDoc.getSingleFiles.map(_.associatedAgent).toList

    agents.distinct.map(_.getURI) shouldBe List("http://kurzum.net/dev-dummy.ttl#this")

    agents should have size (8)
  }

  it should "retrieve all functional dataid:signature declarations" in {

    val signatureStrings = infoboxExampleDataIdDoc.getSingleFiles.map(_.signatureString).toList

    signatureStrings should have size (8)
  }
}
